{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0f38c3dc-ecc7-47c1-8e59-45194b52536c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error: 8862.74358912825\n",
      "Mean Squared Error: 140922913.73985568\n",
      "Mean Absolute percentage Error: 1.4726508062712325\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\atmiya140\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\sklearn\\preprocessing\\_label.py:114: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
      "  y = column_or_1d(y, warn=True)\n"
     ]
    }
   ],
   "source": [
    "from sklearn import linear_model, model_selection, preprocessing\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, mean_absolute_percentage_error\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "#Load the dataset\n",
    "data=pd.read_csv(\"insurance.csv\")\n",
    "#Dependent and Independent variable\n",
    "x=np.array(data.sex).reshape(-1,1)\n",
    "y=np.array(data.expenses).reshape(-1,1)\n",
    "#Preprocessing: Label Encoding\n",
    "encoder=preprocessing.LabelEncoder()\n",
    "x=np.array(encoder.fit_transform(x)).reshape(-1,1)\n",
    "#Train test split\n",
    "xtrain, xtest, ytrain, ytest=model_selection.train_test_split(x,y,test_size=0.3)\n",
    "#Load the model'\n",
    "lr_model=linear_model.LinearRegression()\n",
    "#Train the model\n",
    "lr_model.fit(xtrain, ytrain)\n",
    "#test the model\n",
    "ytest_predited=lr_model.predict(xtest)\n",
    "print(\"Mean Absolute Error:\", mean_absolute_error(ytest,ytest_predited))\n",
    "print(\"Mean Squared Error:\", mean_squared_error(ytest, ytest_predited))\n",
    "print(\"Mean Absolute percentage Error:\", mean_absolute_percentage_error(ytest, ytest_predited))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b37e68cc-c9c5-49f7-b07a-de788235127c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Actual values:\n",
      " [ 37731. 121872.  39891.  64445. 122391.  57081.  60150.  43525.  83088.]\n",
      "Predicted values:\n",
      " [ 46205.  112635.   56642.   54445.  112635.   56375.5  56642.   46205.\n",
      "  66029. ]\n"
     ]
    }
   ],
   "source": [
    "from sklearn import model_selection\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Load the dataset\n",
    "data = pd.read_csv(\"Salary.csv\")\n",
    "\n",
    "# Identify X and Y\n",
    "x = np.array(data.YearsExperience).reshape(-1, 1)\n",
    "y = np.array(data.Salary).reshape(-1, 1)\n",
    "\n",
    "# Split the dataset into training and testing sets\n",
    "xtrain, xtest, ytrain, ytest = model_selection.train_test_split(x, y, test_size=0.3)\n",
    "\n",
    "# Initialize the model\n",
    "regressor = DecisionTreeRegressor()\n",
    "\n",
    "# Train the model\n",
    "regressor.fit(xtrain, ytrain)\n",
    "\n",
    "# Test the model\n",
    "ytest_predicted = regressor.predict(xtest)\n",
    "\n",
    "# Print the actual and predicted values\n",
    "print(\"Actual values:\\n\", ytest)\n",
    "print(\"Predicted values:\\n\", ytest_predicted)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a18e3e9e-f1bc-4442-a86a-856a7ca3ae0d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64967a86-a638-4a01-a188-520df0469715",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cbd99b7b-2c2d-419d-be1c-94bb4e24f544",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
